//1.Required libraries 

import numpy as np 
import pandas as pd

from sklearn.feauture_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegrestion
from sklearn.model_selection import cross_val_score
from scipy.sparse import hstack

//2. Reading datasets in Pandas Dataframe
train = pd.read_csc('read path').fillna('')
test =pd.read_csv('test path').fillna('')

//3.Exploring the dataset
        train.columns
train.head()


//4.Separate the target variable 


train_text = train ['comment_text']
test_text = test['comment_text']


//5.Perform Extraction using n grams

word_vectorizer = TfidVectorizer(
  sublinear_tf=True,
  strip_accents='unicode',
  analyzer='word',
  token_pattern=r '\w{1,}',
  stop_words='english',
  ngram_range(1,1),
  max_features-10000)
  
 word_vectorizer.fit(train_text)
 
 train_word_feautures = word_vectorizer.transform(train_text)
 test_word_feautures= word_vectorizer.transform(test_text)

//6.Perforn Extraction using char n grams

char_vectorizer = TfidVectorizer(
  sublinear_tf=True,
  strip_accents='unicode',
  analyzer='char',
  stop_words='english',
  ngram_range(2,6),
  max_features-50000)
  
 char_vectorizer.fit(train_text)
 
 train_char_feautures = char_vectorizer.transform(train_text)
 test_char_feautures= char_vectorizer.transform(test_text)


//7. Stack sparse matrices horizontally 

train_feautures =hstack([train_char_feautures, train_word_features])
test_feautures= hstack([test_char_features, test_word_features])
